services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: portfolio-backend
    volumes:
      - static:/frontend/static
    restart: always
    env_file: .env
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: portfolio-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static:/static
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend

  db:
    image: postgres:15
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  pgdata: { }
  static: { }

networks:
  app-network:
    driver: bridge